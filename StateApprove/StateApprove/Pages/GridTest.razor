@*@page "/gridtest"

@inject IRoleService ProductService

@using System.Linq
@using System.Collections.ObjectModel

<TelerikGrid Data="@GridData"
             EditMode="@GridEditMode.Incell"
             Pageable="true"
             FilterMode="@GridFilterMode.FilterMenu"
             SelectionMode="@GridSelectionMode.Multiple"
             @bind-SelectedItems="@SelectedItems"
             OnUpdate="@UpdateHandler"
             OnEdit="@EditHandler"
             OnDelete="@DeleteHandler"
             OnCreate="@CreateHandler"
             OnRowRender="@OnRowRenderHandler"
             Resizable="true"
             Sortable="true"
             Class="batch-grid">
    <GridToolBar>
        @{
            <GridCommandButton Command="Add" Icon="add">Add Product</GridCommandButton>
            <TelerikButton Enabled="@GridIsDirty" Icon="save" OnClick="@SaveAllChanges" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Save All Changes</TelerikButton>
            <TelerikButton Enabled="@GridIsDirty" Icon="cancel" OnClick="@RevertAllChanges">Cancel All Changes</TelerikButton>
            if (SelectedItems.Count() > 0)
            {
                if (SelectionNotDeleted)
                {
                    <TelerikButton Icon="delete" OnClick="@DeleteSelected">Delete Selected </TelerikButton>
                }

                if (SelectionIsDirty)
                {
                    <TelerikButton Icon="cancel" OnClick="@RevertSelected">Cancel Selected</TelerikButton>
                }
            }
        }
    </GridToolBar>
    <GridSettings>
        <GridValidationSettings Enabled="false"></GridValidationSettings>
    </GridSettings>
    <GridColumns>
        <GridCheckboxColumn />
        <GridColumn OnCellRender="@((GridCellRenderEventArgs args) => OnCellRenderHandler(args, "ProductName"))" Field=@nameof(BatchEditModel.Name) Title=" Name" />
        <GridColumn OnCellRender="@((GridCellRenderEventArgs args) => OnCellRenderHandler(args, "UnitPrice"))" Field=@nameof(BatchEditModel.Sequence) Width="140px" Title="Sequence" TextAlign="@ColumnTextAlign.Right" />
        <GridCommandColumn Width="265px" Locked="true">
                @{ BatchEditModel currItem = context as BatchEditModel; }

                @if (currItem.IsDeleted)
                {
                    <TelerikButton Icon="undo" OnClick="@( () => RestoreItem(currItem) )">Restore</TelerikButton>
                }
                else
                {
                    <GridCommandButton Icon="delete" Command="Delete">Delete</GridCommandButton>
                }

                @if (currItem.IsDirty && !currItem.IsDeleted)
                {
                    if (!currItem.IsNew)
                    {
                        <GridCommandButton Icon="undo" OnClick="@(() => RevertItem(currItem))">Undo</GridCommandButton>                    
                    }
                    <GridCommandButton Icon="save" Command="Save" ShowInEdit="true">Save</GridCommandButton>
                }
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {
    public ObservableCollection<BatchEditModel> GridData { get; set; } = new ObservableCollection<BatchEditModel>();
    public List<BatchEditModel> PristineItems { get; set; } = new List<BatchEditModel>();
    public List<BatchEditModel> DataToUpdate { get; set; } = new List<BatchEditModel>();
    public IEnumerable<BatchEditModel> SelectedItems { get; set; } = new List<BatchEditModel>();

    public bool GridIsDirty => GridData.ToList().Exists(itm => itm.IsDirty);
    public bool SelectionIsDirty => SelectedItems.ToList().Exists(itm => itm.IsDirty);
    public bool SelectionNotDeleted => SelectedItems.ToList().Exists(itm => !itm.IsDeleted);

    #region Grid CRUD events

    public void EditHandler(GridCommandEventArgs args)
    {
        BatchEditModel item = (BatchEditModel)args.Item;

        if (item.IsDeleted)
        {
            args.IsCancelled = true;
        }
    }

    public void UpdateHandler(GridCommandEventArgs args)
    {
        BatchEditModel item = (BatchEditModel)args.Item;

        if (!item.IsDirty)
        {
            BatchEditModel pristineItem = GetItemFromCollection(PristineItems, item);
            if (pristineItem == null)
            {
                PristineItems.Add(GetItemFromCollection(GridData, item));
            }
        }

        item.IsChanged = true;
        item.DirtyFields.Add(args.Field);

        ChangeLocalItem(item);
    }

    public void CreateHandler(GridCommandEventArgs args)
    {
        BatchEditModel item = (BatchEditModel)args.Item;
        item.Id = GridData.Max(model => model.Id) + 1;
        item.IsNew = true;
        GridData.Insert(0, item);
    }

    public void DeleteHandler(GridCommandEventArgs args)
    {
        BatchEditModel item = (BatchEditModel)args.Item;

        DeleteItem(item);
    }

    #endregion

    #region Grid Render Events

    public void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        BatchEditModel item = args.Item as BatchEditModel;

        if (item.IsNew)
        {
            args.Class = "k-new-row";
        }

        if (item.IsDeleted)
        {
            args.Class = "k-deleted-row";
        }
    }

    public void OnCellRenderHandler(GridCellRenderEventArgs args, string field)
    {
        BatchEditModel item = args.Item as BatchEditModel;

        args.Class = !item.IsNew && item.DirtyFields.Contains(field) == true ? "k-changed-cell" : string.Empty;
    }

    #endregion

    #region Grid Toolbar commands

    public void DeleteSelected()
    {
        foreach (BatchEditModel item in SelectedItems)
        {
            DeleteItem(item);
        }

        SelectedItems = new List<BatchEditModel>();
    }

    public void RevertSelected()
    {
        foreach (BatchEditModel item in SelectedItems)
        {
            RevertItem(item);
        }

        SelectedItems = new List<BatchEditModel>();
    }

    public void RevertAllChanges()
    {
        for (int i = GridData.Count - 1; i >= 0; i--)
        {
            if (GridData[i].IsDirty)
            {
                RevertItem(GridData[i]);
            }
        }
        StateHasChanged();
    }

    public async Task SaveAllChanges()
    {
        List<BatchEditModel> deletedItems = GridData.Where(itm => itm.IsDeleted == true).ToList();
        List<BatchEditModel> newItems = GridData.Where(itm => itm.IsNew == true).ToList();
        List<BatchEditModel> updatedItems = GridData.Where(itm => itm.IsChanged == true && itm.IsDeleted == false).ToList();

        GridData.Clear();
        SelectedItems = Enumerable.Empty<BatchEditModel>();

        List<BatchEditModel> newData = await BatchUpdate(deletedItems, newItems, updatedItems);
        GridData = new ObservableCollection<BatchEditModel>(newData);
    }

    #endregion

    #region Button events in the Changes colum

    public void RestoreItem(BatchEditModel item)
    {
        BatchEditModel localItem = GetItemFromCollection(GridData, item);
        if (localItem != null)
        {
            localItem.IsDeleted = false;
        }
    }

    public void RevertItem(BatchEditModel item)
    {
        if (item.IsNew)
        {
            GridData.Remove(item);
        }
        if (item.IsDeleted)
        {
            item.IsDeleted = false;
            ChangeLocalItem(item);
        }
        if (item.IsChanged)
        {
            BatchEditModel pristineItem = GetItemFromCollection(PristineItems, item);
            if (pristineItem != null)
            {
                ChangeLocalItem(pristineItem);
                PristineItems.Remove(pristineItem);

                pristineItem.DirtyFields = new List<string>();
            }
        }
    }

    #endregion

    #region Demo helper methods

    public void DeleteItem(BatchEditModel itmToDelete)
    {
        BatchEditModel localItem = GetItemFromCollection(GridData, itmToDelete);
        if (localItem != null)
        {
            if (localItem.IsDeleted)
            {
                return;
            }
            else if (localItem.IsNew)
            {
                GridData.Remove(localItem);
            }
            else
            {
                localItem.IsDeleted = true;
            }
        }
    }

    public BatchEditModel GetItemFromCollection(IList<BatchEditModel> collection, BatchEditModel itmToFind)
    {
        var index = collection.ToList().FindIndex(i => i.Id == itmToFind.Id);
        if (index != -1)
        {
            return collection[index];
        }
        return null;
    }

    public void ChangeLocalItem(BatchEditModel item)
    {
        var index = GridData.ToList().FindIndex(i => i.Id == item.Id);

        if (index != -1)
        {
            var existingItem = GridData[index];

            if (SelectedItems.Contains(existingItem))
            {
                var tempSelectedItems = SelectedItems.ToList();

                tempSelectedItems.Remove(existingItem);
                tempSelectedItems.Add(item);

                GridData[index] = item;

                SelectedItems = new List<BatchEditModel>(tempSelectedItems);
            }
            else
            {
                GridData[index] = item;
            }
        }
    }

    public Task<List<BatchEditModel>> BatchUpdate(List<BatchEditModel> deletedItems,
        List<BatchEditModel> insertedItems, List<BatchEditModel> updatedItems)
    {
        foreach (BatchEditModel item in deletedItems)
        {
            DataToUpdate.Remove(item);
        }

        foreach (BatchEditModel item in insertedItems)
        {
            item.Id = DataToUpdate.Max(item => item.Id) + 1;
            DataToUpdate.Insert(0, item);
        }

        foreach (BatchEditModel item in updatedItems)
        {
            var index = DataToUpdate.FindIndex(i => i.Id == item.Id);
            if (index != -1)
            {
                DataToUpdate[index] = item;
            }
        }

        foreach (BatchEditModel item in DataToUpdate)
        {
            item.IsChanged = false;
            item.IsDeleted = false;
            item.IsNew = false;
            item.DirtyFields = new List<string>();
        }

        return Task.FromResult(DataToUpdate);

    }

    #endregion

    #region Grid Data Generation

    protected override void OnInitialized()
    {
        LoadData();
    }

    public void LoadData()
    {
        var products = ProductService.GetRoles();
        var listOfBatchItems = new ObservableCollection<BatchEditModel>();

        foreach (var item in products)
        {
            var batchEditModel = new BatchEditModel(item);
            listOfBatchItems.Add(batchEditModel);
        }

        GridData = listOfBatchItems;
        DataToUpdate = listOfBatchItems.ToList();
    }

    #endregion

    public class BatchEditModel : Role
    {
        public bool IsDeleted { get; set; }
        public bool IsChanged { get; set; }
        public bool IsNew { get; set; }
        public bool IsDirty => this.IsDeleted || this.IsChanged || this.IsNew;
        public List<string> DirtyFields { get; set; }

        public BatchEditModel(Role product)
        {
            Id = product.Id;
            Name = product.Name;
            Sequence = product.Sequence;
            DirtyFields = new List<string>();
        }

        public BatchEditModel() { DirtyFields = new List<string>(); }
    }
}

<style>
    .batch-grid td:first-child,
    .batch-grid th:first-child {
        text-align: center !important;
    }
    .batch-grid .k-new-row, .batch-grid .k-changed-cell {
        background-color: rgb(94, 194, 50, 0.5) !important;
    }

    .batch-grid .k-new-row:hover {
        background-color: rgb(94, 194, 50, 0.6) !important;
    }

    .batch-grid .k-deleted-row td:not(:first-child):not(.k-command-cell) {
        outline: none;
        cursor: default;
        opacity: 0.6;
        filter: grayscale(0.1);
        pointer-events: none;
        box-shadow: none;
    }
</style>*@