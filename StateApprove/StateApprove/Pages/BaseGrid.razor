@page "/basegrid"

@using System.Collections.Generic;

@inject IRoleService roleService
@inject IAboutService aboutService
@inject NavigationManager navManager




        <TelerikGrid Data=@GridData EditMode="@GridEditMode.Incell"
                     Height="500px"
                     Sortable="true"
                     Pageable="true" PageSize=@PageSize OnUpdate=@UpdateItem OnDelete=@DeleteItem OnCreate=@CreateItem
                     OnRowClick="@OnRowClickHandler"
                     SelectionMode="@GridSelectionMode.Single"
                     RowDraggable="true"
             OnRowDoubleClick="@OnRowDoubleClickHandler"
                     OnRowDrop="@((GridRowDropEventArgs<Role> args) => OnRowDropHandler(args))">
            <GridSettings>
                <GridRowDraggableSettings DragClueField="@nameof(Role.Name)"></GridRowDraggableSettings>
            </GridSettings>

            <GridToolBar>
                <GridCommandButton Command="Add" Icon="add">Add Role</GridCommandButton>

            </GridToolBar>
            <GridColumns>
                <GridColumn Field=@nameof(Role.Name) Title="Approve Stage Details Name" />
                <GridColumn Field=@nameof(Role.Sequence) Title="Sequence" />
                <GridCommandColumn Title="Action">
                    <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>



@code {

    int PageSize = 15;
    public List<Role>? GridData { get; set; }
    public List<About>? GridDataAbout { get; set; }
    Role? selectModel;

    protected override void OnInitialized()
    {
        LoadDataAbout();
        LoadData();
        selectModel = new Role();
    }

    private void OnRowDropHandler(GridRowDropEventArgs<Role> args)
    {
        //The data manipulations in this example are to showcase a basic scenario.
        //In your application you should implement them as per the needs of the project.

        GridData.Remove(args.Item);

        var destinationItemIndex = GridData.IndexOf(args.DestinationItem);

        if (args.DropPosition == GridRowDropPosition.After)
        {
            destinationItemIndex++;
        }

        GridData.Insert(destinationItemIndex, args.Item);


    }

    //Role
    private void LoadDataAbout()
    {
        GridDataAbout = aboutService.GetAbouts().ToList();
    }
    private void LoadData()
    {
        GridData = roleService.GetRoles().ToList();

    }

    private void CreateItem(GridCommandEventArgs args)
    {

        roleService.CreateRole((Role)args.Item);

        LoadData();
    }

    private void DeleteItem(GridCommandEventArgs args)
    {
        roleService.DeleteRole((Role)args.Item);
        LoadData();
    }

    private void UpdateItem(GridCommandEventArgs args)
    {
        roleService.UpdateRole((Role)args.Item);
        LoadData();
    }


    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        selectModel = args.Item as Role;
        GoToDetails(selectModel.Id);
    }

    void GoToDetails(int id)
    {
        navManager.NavigateTo($"/singleuser?id={id}");
    }

   

    void OnRowClickHandler(GridRowClickEventArgs args)
    {
        selectModel = args.Item as Role;

    }
}